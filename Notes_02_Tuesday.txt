// ==================================================
// Notes to C /C++

Pointer:
--------

What is a Pointer:

i) data type

ii) Variable of type pointer:

    address ( Position in memory )

    Position in memory: Numbers -- 10234234 / 0xFA123

    This address must be in combination with a data type.


Take care: An address looks like an integer: 

==============================================


Stack:

== Area of Memory

== Can only be accessed at the TOP of Stack

== Push / Pop

Why:

Running a Programm with subroutines:

a) Local Variables

// =======================================

Feature: Passing Parameters to a subroutine:  

        Call-by-Value   (Call-by-Copy)

        Call-by-Address



Calling Convention in C / C++.

Accessing a Variable:

i) By name:       directly

                  More Performant 

ii) By Address:   indirectly

                  Less Performant 



    n = value;   // direct access
00007FF66C1B2C47  mov         eax,dword ptr [value]  
00007FF66C1B2C4A  mov         dword ptr [n],eax  


    int m = *ip;   // give me the value behind the address of  a pointer
00007FF66C1B2C55  mov         rax,qword ptr [ip]  
00007FF66C1B2C59  mov         eax,dword ptr [rax]  
00007FF66C1B2C5B  mov         dword ptr [m],eax  

// ================================================

Passing parameters to a Function:

a) All Data Types are Passed via Copy  // Copy-by-Value

b) Exception: An Array is passed by Address:

              Address of an Array is the address of the 1. element (Index 0)

// ================================================

Example:

Array of int of length 10:

int numbers[10];

double doubleNumbers[10];

// example:  address of first element is 1024

& numbers[0] == 1024

& numbers[1] == 1028

numbers + 1 :  to 1024 a value of 4 is added:
                Why 4: because array is of type int


     doubleNumbers + 1: a value of 8 is added 
     because a double occupies 8 bytes in memory

// ===========================================

A) Define an array in a Subroutine
   Size arbitrary (#define)

B) Fill the Array in a Subroutine with Random Values
   in the range of 1 until 100

C) Compute the Maximum Value of all values in this
   array - in another Subroutine

D) Minumum, Average Value ... - in anther subroutine

// ===========================================

Re-Cap:

Pointer:

A) Can be used with EXISTING Variables:

    int n;
    ip = & n;   // n is the "existing" variable

B) Can be used with data, which has still has to be provided:

    i) static:   "int n"

    ii) dynamic: 'new'


// ===========================================

2 kinds of calling new:

a) scalar new:

     = new int;

b) array-style new

   = new int[length];

2 kinds of how to call delete:

delete ptr;    // scalar new

delete[] ptr;  // array-style new 

// -------------------------------------------

What's happening in this situation:

int* ip = new int;
delete[] ip;

// OR

int* ip = new int[100];
delete ip;

UB   Undefined behaviour

// -------------------------------------------

Method:    2 Styles:  static style  // dynamic style 

           Comparison:   pro / contra   //  bad / good


A) Explain the Goal of the Method:  Specification.

SplitNumber:

    Example:   int n = 43642;

               split 43642 into digits 4, 3, 6, 4, and 2.

               // One or two subroutines / functions can help

B) Signature of SplitNumber:

i) Static Style:
      
            int digits [3];   // risk: can be too small

            bool SplitNumber (int number, digits, 3 /* length */ )

            bool SplitNumber (int number, int* buffer, int length);


ii) Dynamic Style:

            SplitNumber (int number)

            SplitNumber(12345)  ==> 5 digits
                                ==> new int [5]

            int* SplitNumber (int number);

            int* sp;
            int solutionLength;

            sp = SplitNumber (12345, &solutionLength);

            int* SplitNumber (int number, int* solutionLength);
     
            a) Who calls delete on this buffer ????

               The Caller !!!!

            b) How long is the resulting buffer:
               See 2nd parameter

// ===================================================

Sequence of characters / string /

Sequence of characters have a "special" last character:

i) Null Termination Character 

ii) 
   

